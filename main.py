from lexer import Lexer
from parser import Parser
from compiler import Compiler
from vm import VM

# Define the path to the source file
NOVA_FILE_PATH = 'examples/test.nova'

def main():
    """
    The main function to run the lexer, parser, compiler, and VM.
    """
    try:
        with open(NOVA_FILE_PATH, 'r', encoding='utf-8') as f:
            source_code = f.read()
    except FileNotFoundError:
        print(f"Error: The file '{NOVA_FILE_PATH}' was not found.")
        return

    print("--- Source Code ---")
    print(source_code)

    # Lexer -> Produces tokens
    lexer = Lexer(source_code)
    tokens = lexer.tokenize()
    
    # Parser -> Produces AST
    parser = Parser(tokens)
    ast = parser.parse()
    
    # Compiler -> Produces Bytecode and function table
    compiler = Compiler()
    compiler.compile(ast)
    bytecode = compiler.bytecode
    # Get the functions dictionary from the compiler
    functions = compiler.functions 
    
    print("\n--- Generated Bytecode ---")
    for i, instruction in enumerate(bytecode):
        print(f"{i:04d} {instruction[0]:<15} {instruction[1] if instruction[1] is not None else ''}")

    # VM -> Executes Bytecode and produces output
    print("\n--- Program Output ---")
    # Pass the 'functions' dictionary to the VM
    vm = VM(bytecode, functions)
    try:
        vm.run()
    except Exception as e:
        print(f"Runtime Error: {e}")


if __name__ == '__main__':
    main()
